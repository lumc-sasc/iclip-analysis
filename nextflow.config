// include parameters in params.config
includeConfig "$projectDir/conf/params.config"
includeConfig "$projectDir/conf/resources.config"

// executor
process.executor       = 'slurm'

// container set as singularity
singularity.enabled    = true
singularity.autoMounts = true
conda.enabled          = false
docker.enabled         = false
podman.enabled         = false
shifter.enabled        = false
charliecloud.enabled   = false
apptainer.enabled      = false

// cache directory set as desired directory
singularity.cacheDir   = null

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
// trace, timeline and report to monitor/assess status and use of resources
trace {
    enabled            = true
    file               = "${params.outdir}/pipeline_info/pipeline_trace_${trace_timestamp}.txt"
    fields             = 'task_id,name,process,tag,status,exit,module,time,disk,memory,attempt,start,complete,duration,realtime,queue,%cpu,%mem,rss,workdir,error_action'
}
timeline {
    enabled            = true
    file               = "${params.outdir}/pipeline_info/pipeline_timeline_${trace_timestamp}.txt"
}
report {
    enabled            = true
    file               = "${params.outdir}/pipeline_info/pipeline_report_${trace_timestamp}.html"
}


// process specific configs
process {

    // general
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode
        ]

    withName: 'GUNZIP_*' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DECOMP' {
        publishDir = [
            path: { "${params.outdir}/reads/unzipped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.fastq'
        ]
    }

    withName: 'COMP' {
        publishDir = [
            path: { "${params.outdir}/reads/zipped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.fastq.gz'
        ]
    }

    withName: 'REMOVE_CHAR' {
        ext.cmd1 = "sed 's/ /#/g; s/\\//#/g' "
        ext.suffix = '.edited'
        ext.ext = 'fastq'
        publishDir = [
            path: { "${params.outdir}/reads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: params.save_edited_reads
        ]
    }

// need if statements for whether the workflow/process is used or not to prevent warnings
    withName: 'FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
        ext.args   = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
    }

// middle 3 adapters from illumina: https://support.illumina.com/content/dam/illumina-support/help/Illumina_DRAGEN_Bio_IT_Platform_v3_7_1000000141465/Content/SW/Informatics/Dragen/FastQC_Adapter_Kmer_files_fDG.htm
    withName: 'FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
        ext.args  = {
            [
                "--fastqc_args '-t ${task.cpus}'",
                "-a 'AGATCGGAAGAGCGGTTCAG -a AGATCGGAAGAG -a TGGAATTCTCGG -a GATCGTCGGACT -a AAAAAAAAAAAA -a GGGGGGGGGGGG' ",
                "--length 15",
                params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
            ].flatten().unique(false).join(' ').trim()
        }
        publishDir = [
            [
                path: { "${params.outdir}/trimgalore/fastqc" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,zip}"
            ],
            [
                path: { "${params.outdir}/trimgalore" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/trimgalore" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        ]
    }

    withName: 'UMITOOLS_EXTRACT' {
        ext.args   = [
                params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/umitools" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/umitools" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_umi_intermeds
            ]
        ]
    }      

    withName: 'SORTMERNA' {
        ext.args     = '--num_alignments 1 -v'
        // may need to add best param
        
        publishDir = [
            [
                path: { "${params.outdir}/sortmerna" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/sortmerna" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.save_non_ribo_reads
            ]
        ]
    }

    withName: 'FASTQC_AFTER_SORTMERNA' {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'FASTQC_AFTER_DEDUP' {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'FASTQC_UNMAPPED' {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: params.analyse_unmapped
        ]
    }

    withName: 'PREPARE_GENOME:STAR_GENOMEGENERATE' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'BOWTIE2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/build" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'BOWTIE2_ALIGN' {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/align" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    // changed outSAMattributes
    withName: 'ALIGN_STAR:STAR_ALIGN' {
    
        ext.args   = [
            '--quantMode TranscriptomeSAM GeneCounts',
            '--twopassMode Basic',
            '--outSAMtype BAM Unsorted SortedByCoordinate',
            '--readFilesCommand zcat',
            '--runRNGseed 0',
            '--outFilterMultimapNmax 20',
            '--outSAMattributes NH HI AS nM NM MD jM jI MC ch',
            '--outSAMstrandField intronMotif',

            '--alignEndsType Extend5pOfRead1',
            '--outFilterMismatchNoverReadLmax 0.04',
            '--outFilterMismatchNmax 999',
            '--chimSegmentMin 10',
            '--chimOutType WithinBAM',
            '--chimMultimapNmax 20',

            '--outFilterMatchNminOverLread 0.3',

            params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
            params.extra_star_align_args ? params.extra_star_align_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()

        publishDir = [
            [
                path: { "${params.outdir}/star/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab,junction,sam,wig,bg}'
            ],
            [
                path: { "${params.outdir}/star/bam" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/star/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }

    withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
        ext.args   = { [
            meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
            params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
            params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
        ].join(' ').trim() }
        ext.prefix = { "${meta.id}.umi_dedup.sorted" }
        publishDir = [
            [
                path: { "${params.outdir}/star/umitools" },
                mode: params.publish_dir_mode,
                pattern: '*.{tsv,log}'
            ],
            [
                path: { "${params.outdir}/star/umitools/bam" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: (
                    params.save_align_intermeds ||
                    params.with_umi ||
                    params.save_umi_intermeds
                )
            ]
        ]
    }

    withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = { "${meta.id}.umi_dedup.sorted" }
        publishDir = [
            path: { "${params.outdir}/star/umitools/bai" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}',
            enabled: (
                params.save_align_intermeds ||
                params.with_umi ||
                params.save_umi_intermeds
            )
        ]
    }

    withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.umi_dedup.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/star/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }


    withName: 'EXTRACT_CROSSLINKS:BEDTOOLS_BAMTOBED' {
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/01_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_bamtobed" },
            mode: params.publish_dir_mode,
            pattern: '*.{bam,bed}',
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:BEDTOOLS_SHIFT' {
        ext.args = '-m 1 -p -1'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/02_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_shift" },
            mode: params.publish_dir_mode,
            pattern: '*.bed',
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:BEDTOOLS_GENOMECOV_POS' {
        ext.args = '-dz -strand + -5'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/03_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_genomecov" },
            mode: params.publish_dir_mode,
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:BEDTOOLS_GENOMECOV_NEG' {
        ext.args = '-dz -strand - -5'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/03_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_genomecov" },
            mode: params.publish_dir_mode,
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:SELECT_BED_POS' {
        ext.cmd1 = 'awk \'{OFS="\\t"}{print \$1, \$2, \$2+1, ".", \$3, "+"}\''
        ext.suffix = '.pos'
        ext.ext = 'bed'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/04_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:SELECT_BED_NEG' {
        ext.cmd1 = 'awk \'{OFS="\\t"}{print \$1, \$2, \$2+1, ".", \$3, "-"}\''
        ext.suffix = '.neg'
        ext.ext = 'bed'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/04_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:MERGE_AND_SORT' {
        ext.cmd1 = 'sort -k1,1 -k2,2n'
        ext.suffix = '.merged.sorted'
        ext.ext = 'bed'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/05_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:CROSSLINK_COVERAGE' {
        ext.cmd1 = 'awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
        ext.suffix = '.merged.sorted'
        ext.ext = 'bedgraph'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/06_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/merged" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:CROSSLINK_NORMCOVERAGE' {
        ext.cmd1 = 'awk -v total=\$CMD2 \'{printf "%s\\t%i\\t%i\\t%s\\t%f\\t%s\\n", \$1, \$2, \$3, \$4, 1000000*\$5/total, \$6}\' | awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
        ext.cmd2 = 'awk \'BEGIN {total=0} {total=total+\$5} END {print total}\''
        ext.suffix = '.merged.norm.sorted'
        ext.ext = 'bedgraph'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/06_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/merged" },
            mode: params.publish_dir_mode
        ]
    }
    
    // separately: POS
    withName: 'EXTRACT_CROSSLINKS:MERGE_AND_SORT_POS' {
        ext.cmd1 = 'sort -k1,1 -k2,2n'
        ext.suffix = '.pos.sorted'
        ext.ext = 'bed'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/05_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/pos" },
            mode: params.publish_dir_mode,
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:CROSSLINK_COVERAGE_POS' {
        ext.cmd1 = 'awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
        ext.suffix = '.pos.sorted'
        ext.ext = 'bedgraph'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/06_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/pos" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:CROSSLINK_NORMCOVERAGE_POS' {
        ext.cmd1 = 'awk -v total=\$CMD2 \'{printf "%s\\t%i\\t%i\\t%s\\t%f\\t%s\\n", \$1, \$2, \$3, \$4, 1000000*\$5/total, \$6}\' | awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
        ext.cmd2 = 'awk \'BEGIN {total=0} {total=total+\$5} END {print total}\''
        ext.suffix = '.pos.norm.sorted'
        ext.ext = 'bedgraph'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/06_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/pos" },
            mode: params.publish_dir_mode
        ]
    }


    // separately: NEG
    withName: 'EXTRACT_CROSSLINKS:MERGE_AND_SORT_NEG' {
        ext.cmd1 = 'sort -k1,1 -k2,2n'
        ext.suffix = '.neg.sorted'
        ext.ext = 'bed'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/05_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/neg" },
            mode: params.publish_dir_mode,
            enabled: params.save_extract_crosslink_intermeds
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:CROSSLINK_COVERAGE_NEG' {
        ext.cmd1 = 'awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
        ext.suffix = '.neg.sorted'
        ext.ext = 'bedgraph'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/06_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/neg" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'EXTRACT_CROSSLINKS:CROSSLINK_NORMCOVERAGE_NEG' {
        ext.cmd1 = 'awk -v total=\$CMD2 \'{printf "%s\\t%i\\t%i\\t%s\\t%f\\t%s\\n", \$1, \$2, \$3, \$4, 1000000*\$5/total, \$6}\' | awk \'{OFS = "\t"}{if (\$6 == "+") {print \$1, \$2, \$3, \$5} else {print \$1, \$2, \$3, -\$5}}\' | sort -k1,1 -k2,2n'
        ext.cmd2 = 'awk \'BEGIN {total=0} {total=total+\$5} END {print total}\''
        ext.suffix = '.neg.norm.sorted'
        ext.ext = 'bedgraph'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/06_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/neg" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'BEDGRAPHTOBIGWIG_RAW_POS' {
        ext.suffix = '.pos.sorted'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/07_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/pos" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'BEDGRAPHTOBIGWIG_RAW_NEG' {
        ext.suffix = '.neg.sorted'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/07_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/neg" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'BEDGRAPHTOBIGWIG_NORM_POS' {
        ext.suffix = '.pos.norm.sorted'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/07_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/pos" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'BEDGRAPHTOBIGWIG_NORM_NEG' {
        ext.suffix = '.neg.norm.sorted'
        publishDir = [
            path: { "${params.outdir}/extract_crosslinks/07_${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/neg" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'PURECLIP' {
        ext.args = "-ld -iv '1;2;3' -v"
        publishDir = [
            path: { "${params.outdir}/peak_calling/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
    }


    withName: 'MULTIQC' {
        ext.args   = '--profile-runtime'
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
