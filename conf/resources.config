process {
    // fastqc
    withName: 'FASTQC' {
        cpus = 2
        memory = { 2.GB * task.attempt }
        time = { 1.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // trimgalore (NEEDS TO BE ADJUSTMENT)
    withName: 'TRIMGALORE' {
        memory = { 2.GB * task.attempt }
        time = { 1.hour * task.attempt }
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // sortmerna
    withName: 'SORTMERNA' {
        cpus = { 12 * task.attempt }
        memory = { 100.GB * task.attempt }
        time = { 12.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // indexing genome
    withName: 'PREPARE_GENOME:STAR_GENOMEGENERATE' {
        cpus = { 10 * task.attempt }
        memory = { 50.GB * task.attempt }
        time = { 8.hour * task.attempt }
    
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // star alignment
    withName: 'ALIGN_STAR:STAR_ALIGN' {
        cpus = { 10 * task.attempt }
        memory = { 50.GB * task.attempt }
        time = { 8.hour * task.attempt }
    
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // umitools deduplication (NEEDS ADJUSTMENT)
    withName: 'UMITOOLS_DEDUP' {
        cpus = 2
        memory = { 2.GB * task.attempt }
        time = { 1.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // samtools flagstat (NEEDS ADJUSTMENT)
    withName: 'SAMTOOLS_FLAGSTAT' {
        cpus = 2
        memory = { 2.GB * task.attempt }
        time = { 1.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // samtools flagstat (NEEDS ADJUSTMENT)
    withName: 'SAMTOOLS_INDEX' {
        cpus = 2
        memory = { 2.GB * task.attempt }
        time = { 1.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }



}
