process {
    
    // general
    cpus = { 2 * task.attempt }
    memory = { 2.GB * task.attempt }
    time = { 1.hour * task.attempt }

    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
    maxRetries = 3


    // sortmerna
    withName: 'SORTMERNA' {
        cpus = { 6 * task.attempt }
        memory = { 50.GB * task.attempt }
        time = { 8.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 5
    }

    withName: 'RIBODETECTOR' {
        cpus = { 8 * task.attempt }
        memory = { 20.GB * task.attempt }
        time = { 8.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 5
    }

    // indexing genome
    withName: 'PREPARE_GENOME:STAR_GENOMEGENERATE' {
        cpus = { 8 * task.attempt }
        memory = { 30.GB * task.attempt }
        time = { 8.hour * task.attempt }
    
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // star alignment
    withName: 'ALIGN_STAR:STAR_ALIGN' {
        cpus = { 10 * task.attempt }
        memory = { 50.GB * task.attempt }
        time = { 8.hour * task.attempt }
    
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
        cpus = { 4 * task.attempt }
        memory = { 20.GB * task.attempt }
        time = { 4.hour * task.attempt }
    
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    // pureclip
    withName: 'PURECLIP|HOMER_ANNOTATEPEAKS|STREME' {
        cpus = { 2 * task.attempt }
        memory = { 10.GB * task.attempt }
        time = { 1.hour * task.attempt }
    
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName: 'BEDTOOLS_INTERSECT' {
        cpus = { 2 * task.attempt }
        memory = { 5.GB * task.attempt }
        time = { 1.hour * task.attempt }

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

}
